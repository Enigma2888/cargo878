import { Button } from "@/components/ui/button";
import { Share2, Copy, Check } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/lib/supabase";
import { getTelegramUser, shareToTelegramContacts, openTelegramLink } from "@/utils/telegram";
import { createShareLink, createTelegramShareLink, trackReferralClick } from "@/utils/referral";
import { Header } from "@/components/Header";
import { BottomNav } from "@/components/BottomNav";
import { useState, useEffect } from "react";
import { useSearchParams } from "react-router-dom";
const Partnership = () => {
  const {
    toast
  } = useToast();
  const user = getTelegramUser();
  const [isCopied, setIsCopied] = useState(false);
  const [searchParams] = useSearchParams();
  useEffect(() => {
    const startapp = searchParams.get('startapp');
    if (startapp) {
      try {
        const data = JSON.parse(atob(startapp));
        if (data.referrer) {
          trackReferralClick(data.referrer).then(() => {
            console.log('Referral click tracked successfully');
          }).catch(error => {
            console.error('Error tracking referral click:', error);
          });
        }
      } catch (error) {
        console.error('Error processing referral data:', error);
      }
    }
  }, [searchParams]);
  const {
    data: referralsCount = 0,
    refetch: refetchReferrals
  } = useQuery({
    queryKey: ['referrals-count', user?.id],
    queryFn: async () => {
      if (!user?.id) return 0;
      const {
        count,
        error
      } = await supabase.from('referrals').select('*', {
        count: 'exact',
        head: true
      }).eq('referrer_id', user.id);
      if (error) throw error;
      return count || 0;
    },
    enabled: !!user?.id
  });
  const {
    data: clicksCount = 0,
    refetch: refetchClicks
  } = useQuery({
    queryKey: ['referral-clicks-count', user?.id],
    queryFn: async () => {
      if (!user?.id) return 0;
      const {
        count,
        error
      } = await supabase.from('referral_clicks').select('*', {
        count: 'exact',
        head: true
      }).eq('referrer_id', user.id);
      if (error) throw error;
      return count || 0;
    },
    enabled: !!user?.id
  });
  useEffect(() => {
    if (!user?.id) return;
    const channel = supabase.channel('referral-updates').on('postgres_changes', {
      event: '*',
      schema: 'public',
      table: 'referral_clicks',
      filter: `referrer_id=eq.${user.id}`
    }, () => {
      console.log('Referral click detected, refreshing data...');
      refetchClicks();
    }).on('postgres_changes', {
      event: '*',
      schema: 'public',
      table: 'referrals',
      filter: `referrer_id=eq.${user.id}`
    }, () => {
      console.log('Referral created, refreshing data...');
      refetchReferrals();
    }).subscribe();
    return () => {
      supabase.removeChannel(channel);
    };
  }, [user?.id, refetchClicks, refetchReferrals]);
  const handleCopyLink = async () => {
    if (!user?.id) {
      toast({
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
      });
      return;
    }
    const link = createShareLink(user.id);
    await navigator.clipboard.writeText(link);
    if (navigator.vibrate) {
      navigator.vibrate(100);
    }
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
    toast({
      title: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞",
      description: "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –¥—Ä—É–∑—å—è–º"
    });
  };
  const handleShareToTelegram = () => {
    if (!user?.id) {
      toast({
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
      });
      return;
    }
    const link = createShareLink(user.id);
    const shareText = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É –∏ –ø–æ–ª—É—á–∏—Ç–µ 500 –±–∞–ª–ª–æ–≤ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑! üéÅ\n\n' + link;
    const sharedViaWebApp = shareToTelegramContacts(shareText);
    if (!sharedViaWebApp) {
      const shareUrl = createTelegramShareLink(user.id);
      openTelegramLink(shareUrl);
    }
  };
  return <div className="min-h-screen bg-[#1A1F2C] text-white pb-20">
      <Header />
      <main className="pt-20 px-4 max-w-md mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π!</h1>
          <div className="text-xl mb-2">
            <span className="text-white">–î–∞—Ä–∏–º –ø–æ </span>
            <span className="text-[#FF6B6B]">300¬†—Ä—É–±–ª–µ–π</span>
            <span className="text-white"> –∫–∞–∂–¥–æ–º—É!</span>
          </div>
          <p className="text-gray-400 text-sm">
            –ü–æ–ª—É—á–∏ –∑–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ —Ç–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ{' '}
            <span className="text-[#FF6B6B]">500 –±–∞–ª–ª–æ–≤</span>. –¢–∞–∫–∂–µ{' '}
            <span className="text-[#FF6B6B]">500 –±–∞–ª–ª–æ–≤</span> –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–π –¥—Ä—É–≥.
          </p>
        </div>

        <div className="bg-[#2A2F3C] rounded-xl p-6 mb-6">
          <div className="flex items-center gap-2 mb-3">
            <span className="text-[#FFD700]">üëë</span>
            <span className="text-gray-300">1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å</span>
          </div>
          <p className="text-sm text-gray-400 mb-4">
            –ë–∞–ª–ª–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ 100% –ø–æ–∫—É–ø–æ–∫.
          </p>
          <div className="bg-black/20 rounded-lg p-3 text-sm text-gray-400">
            –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ä—à–∏—Ç –ø–æ–∫—É–ø–∫—É.
          </div>
        </div>

        <div className="bg-[#2A2F3C] rounded-xl p-6 mb-6">
          <h3 className="text-lg font-medium mb-4">–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</h3>
          <Button onClick={handleCopyLink} className={`w-full transition-all duration-200 ${isCopied ? 'bg-green-500 text-white hover:bg-green-600' : 'bg-white text-black hover:bg-white/90'} mb-4`}>
            {isCopied ? <>
                <Check className="w-4 h-4 mr-2" />
                –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
              </> : <>
                <Copy className="w-4 h-4 mr-2" />
                –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </>}
          </Button>
          <Button onClick={handleShareToTelegram} className="w-full" variant="secondary">
            <Share2 className="w-4 h-4 mr-2" />
            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
          </Button>
        </div>

        <div className="bg-[#2A2F3C] rounded-xl p-6">
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-gray-400">–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ</span>
              <span className="font-medium">{clicksCount}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-400">–°–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑</span>
              <span className="font-medium">{referralsCount}</span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-gray-400">–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –†–§</span>
              <span className="font-medium">0</span>
            </div>
            <div className="flex justify-between items-center pt-4 border-t border-gray-700">
              <span className="font-medium">–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</span>
              <span className="font-medium">{referralsCount * 500}</span>
            </div>
          </div>
        </div>
      </main>
      <BottomNav />
    </div>;
};
export default Partnership;