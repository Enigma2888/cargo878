
import { supabase } from "@/lib/supabase";
import { getTelegramUser, getStartParam } from "./telegram";

export const createShareLink = (userId: string) => {
  // –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ base64
  const encoded = btoa(userId);
  return `https://t.me/infocargo878_bot/app?startapp=${encoded}`;
};

export const createTelegramShareLink = (userId: string) => {
  const referralLink = createShareLink(userId);
  const text = encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É –∏ –ø–æ–ª—É—á–∏—Ç–µ 500 –±–∞–ª–ª–æ–≤ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑! üéÅ');
  return `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${text}`;
};

export const trackReferralClick = async (referrerId: string) => {
  try {
    console.log('Tracking referral click for:', referrerId);
    const { error } = await supabase
      .from('referral_clicks')
      .insert([{ referrer_id: referrerId }]);
    
    if (error) {
      console.error('Error tracking referral click:', error);
      throw error;
    }
    console.log('Referral click tracked successfully');
  } catch (error) {
    console.error('Error in trackReferralClick:', error);
    throw error;
  }
};

export const processReferralParams = async () => {
  const currentUser = getTelegramUser();
  if (!currentUser?.id) {
    console.log('No current user found');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä startapp –∏–∑ URL –∏–ª–∏ –∏–∑ initData
    const urlParams = new URLSearchParams(window.location.search);
    const startAppParam = urlParams.get('startapp') || getStartParam();
    
    if (!startAppParam) {
      console.log('No startapp parameter found');
      return;
    }

    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä startapp (—Ç–µ–ø–µ—Ä—å –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ ID)
      const referrerId = atob(startAppParam);

      console.log('Decoded referrer ID:', referrerId);

      if (!referrerId || referrerId === currentUser.id) {
        console.log('Invalid referrer ID or self-referral attempted');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —á—å–∏–º-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
      const { data: existingReferral, error: checkError } = await supabase
        .from('referrals')
        .select('*')
        .eq('referee_id', currentUser.id)
        .maybeSingle();

      if (checkError) {
        throw new Error(`Failed to check existing referral: ${checkError.message}`);
      }

      if (existingReferral) {
        console.log('User is already a referral');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      const { data: referrer, error: referrerError } = await supabase
        .from('telegram_users')
        .select('id')
        .eq('id', referrerId)
        .maybeSingle();

      if (referrerError || !referrer) {
        console.error('Referrer does not exist:', referrerError);
        return;
      }

      console.log('Creating new referral relationship');
      const { error: referralError } = await supabase
        .from('referrals')
        .insert({
          referrer_id: referrerId,
          referee_id: currentUser.id
        });

      if (referralError) {
        throw new Error(`Failed to create referral: ${referralError.message}`);
      }
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∏–∫
      await trackReferralClick(referrerId);
      console.log('Referral processing completed successfully');
      return true;

    } catch (decodeError) {
      console.error('Failed to decode startapp parameter:', decodeError);
      return false;
    }

  } catch (error) {
    console.error('Error processing referral:', error);
    return false;
  }
};
